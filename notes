Java extension is .java
if we need to print something we need method in java. Here print is a method.Use colon after every statement
System.out.println("Hello World");
bytecode has extension .class

---WORA
Java is a Write Once Run Anywhere.once we write code in our machine it can be run in any machine having the jre and jvm

---JVM
for running java we need jvm java virtual machine irrespective of the os ios windows etc.no jvm means we cant run.We have os on hardware. JVM execute java code we create.JVm undestands only byte code which is not readable by humans.so we neeed a compiler to convert the java code we write to a bytecode.Our code can be many files. out of all these files if we have to run first file then the first file need to have main method.Exexution start from the file we specify which has the main.

---JRE
jvm alone is not enough to run a java program.we need a lot of libraries also...jvm along with libraries gives jre or java runtime environment.

---JDK
stands for java development kit.Jdk will have jre and jre will have jvm.Developersv install jdk.

---MAIN
main comes with public static void main(arguments).
Also we need to have a class.Main should come inside the class.In java we cfeate everything as class and objects.
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        System.out.println("Hello world");
    }
}
---println
when we use println after printing the statement the cursoor move to next line...if we use print cursor stays there itself so next statement also will be printed in the same line


---DATATYPES
boolean    boolean b =true;                 true and false..used for conditions
char    char c = 'k';     use single quotes..accepts only single alphabet or single digit number ..'5'
int                       negative and positive numbers
short
byte                      -128 to 127
long        long num = 5643l    put l after the number
float       float num = 5.6f   -we have to explicitly mention it
double      double num = 5.6    more precision

int num1=4;
datatype first then variable name

public class javatutorial
{
    public static void main(String a[])
    {
        int num1=9;
        int num2=1;
        int result= num1+num2;
        System.out.println(result);
      
    }
}

---LITERALS
literals are fixed values that are used directly in the code to represent data.
Integer Literals: Whole numbers, written in decimal, hexadecimal (e.g., 0x1A), octal (e.g., 012), or binary (e.g., 0b101).
Floating-Point Literals: Real numbers, written as decimals or in scientific notation (e.g., 3.14, 1.23e4).
Character Literals: Single characters enclosed in single quotes (e.g., 'A', '1').
String Literals: Sequences of characters enclosed in double quotes (e.g., "Hello, World!").
Boolean Literals: Represent true or false.
Null Literal: Represents a null reference, indicating the absence of an object.

---IMPLCIT CONVERSION(TYPE CONVERSION)
Suppose we have byte b = 126 and int a = 256...we know that byte can only store upto 127 ...when we assign b=a ..it cant but we can assign a=b;
a=b assignment is called implicit type conversion

---EXPLICIT TYPE CONVERSION(CASTING)
WE NEED TO CHANGE THE DATATYPE TO ACCOMODATE THEM
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        byte num1=126;
        int num2=257;
        num1= (byte)num2;
        System.out.println(num1);

    }
}

while converting int to byte modulus is taken. means the remainder after dividing 257 with 256 is done ...means output will be 1.

another example 

float f=5.6f;
int x= (int)f;                     Output :5
this works.

---TYPE PROMOTION
EG:
byte b=10;
byte c=30;
int result = b*c;
Here after multiplication the result is 300.even it was the result of multiplication of bytes it is out of range...so store them in int.

---ARITHMETIC OPERATORS
addition +
substraction -
multiplication *
division /            give quotient only
modulus %             give reminder
post increment num++
pre increment  ++num
postdecrement num--
pre decrement --num


eg:
int num1 = 7;
int result= num1 +1;
System.out.println(result);                           output:8

eg:
int num1 = 7;
num1++;
System.out.println(num1);                            output:8


eg:
num--;

---RELATIONAL OPERATORS
less than       <
greater than    >
equal to        =       assignment operator
comparison      ==
not equal       !=
                >=
                <=

---LOGICAL OPERATORS
and        &
or         |
not       !
short circuit and    &&
short circuit or     ||

eg:
r= x>y && a<b
If first one is false then it won't look the second thing.similarly for || also.if first one is true it immediately give the output true.
eg:
s= !r
if r is true s is false
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int b=3;
        boolean result= c>b;
        System.out.println(result);

    }
}
output is false.

---CONDITIONAL STATEMENTS

----IF ELSE

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        //int b=3;
       if(c>7)
        System.out.println("Hello");
       else
           System.out.println("bye");

    }
}

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        //int b=3;
       if(c>7)
       {
        System.out.println("Hello");                   ----if multiple statements then use bracket
        System.out.println("thank");
        }
       else
           System.out.println("bye");

    }
}

---IF ELSE IF
EG:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int b=3;
       if(c>7)
        System.out.println("Hello");                    
       else if(condition)
           System.out.println("bye");
       else
           System.out.println("bye");
    }
}

---TERNARY OPERATOR/CONDITIONAL OPERATOR

public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int result;
        result=c>3? 10:20;
            System.out.println(result);                   


    }
}

---SWITCH STATEMENT

public class javatutorial
{
    public static void main(String a[])
    {
        int n=3;
        switch(n)
        {
            case 1:
                System.out.println("monday");
                break;
            case 2:
                System.out.println("tuesday");
                break;
            case 3:
                System.out.println("wednesday");
                break;

        }
    }
}

OUTPUT: WEDNESDAY

eg:
new switch statement allows to use string also as cases.earlier it was only numbers.if not any of the cases then it executes default
public class javatutorial
{
    public static void main(String a[])
    {
        String day="friday";
        switch(day)
        {
            case "monday","tuesday":
                System.out.println("6am");
                break;
            case "wednesday":
                System.out.println("7am");
                break;
            default:
                System.out.println("8am");
                break;

        }
    }
}

----WHILE LOOP
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        while(i<5) {
            System.out.println("result");
            i++;
        }
    }
}

suppose for every result we have to print hi 3 times
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        while(i<5) {
            System.out.println("result");
            int j = 1;
            while (j <= 3) {
                System.out.println("hi");
                j++;
            }
            i++;
        }
    }
}

----DO WHILE LOOP

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        do{
            System.out.println("result");
            i++;
           }while(i<3);
    }
}

----FOR LOOP

public class javatutorial
{
    public static void main(String a[])
    {
        int i;
        for(i=0;i<=4;i++)
        {
            System.out.println("result");

        }
    }
}


---CLASS AND OBJECT THEORY IN JAVA

in java everything around is considered as an object.Class is like a blueprint.We create objects using that.Objects differ each other.Object will have a property and behaviour.human sare objects and has property like know how to dance walk etc...also everyone walk differently thats the behaviour. Carpenter creates a table(object) we need to give the blueprint or design specs to him...so as it is technical we give the details to a person and he explains technically to the carpenter .similarly we create a class file in programming that act as a bleprint for the carpenter to create the object.we create a classfile it is converted to byte code after compilation then goes to jvm and then get object.
- inside class we write variables(properties)and write methods(functions).
-then we create another class to create objects using keyword new.
-then values are assigned to variables
-we can call the function also if  it is already created in the class

---METHODS/FUNCTIONS
methods start with how we can access them,public means we can access them anywhere.after a method perform operations we have to specify the result and also along with its datatype.
public int add          for a calculator


eg:
class Sample {
    int a;                   
    int b;
                               //initialised two variables a and b, also defined a function display which displays the value of a.
    void display()
    {
        System.out.println(a);
    }
}
class Hello {
    public static void main(String[] ar) {
        Sample s1 = new Sample();                       //created two objects s1 and s2.
        Sample s2 = new Sample();
        s1.a = 10;                                         // assigned values to the variables of that particular object
        s1.b = 20;
        s2.a = 30;
        s2.b = 40;
        s1.display();                     //displaying value of a of object s1
        System.out.println(s1.a);         //printing value of a of object s1


    }
}

OUTPUT:

eg:
class Sample {
    int a;
    int b;

    void sum()                                   //void used when we dont expect any value in return..just printing only..if we use  public int sum() then use                                                          return inside it for returning some values 
    {
        System.out.println(a+b);
    }
    void difference()
    {
        System.out.println(a-b);
    }
}
class Hello {
    public static void main(String hey[]) {                //string ar is not necessary..we can give any name..
        Sample s1 = new Sample();
        Sample s2 = new Sample();
        s1.a = 10;
        s1.b = 20;
        s2.a = 30;
        s2.b = 40;
        s1.sum();
        s2.difference();
    }
}

----METHOD OVERLOADING
means we have many methods with the same name but the parameters are different.

class Calculator
{
    int num;                                   //instance variable
    public int add(int a,int b)               // a,b local variable
    {
        int result = a+b;
        return result;
    }
    public int add(int a,int b,int c)            //two add methods but different parameters
    {
        int result = a+b+c;
        return result;
    }
}

public class demo
{
    public static void main(String ar[])
    {
        Calculator obj =new Calculator();
        int res= obj.add(3,4,5);                  //goes with second add
        System.out.println(res);
    }
}

----STACK AND HEAP

In JVM we have stack and heap memory.
STACK:- arranged one above the other and follows first in first out algorithm.Every method will have one stack....main is also a method....so for the below example 2 methods and 2 stacks will be there(add and main)
***In stack data is stored as key and value ..key will be variable name and value will be variable value.
for table add the stack will be like these:
                                                                          101
ADD STACK                     MAIN STACK                                 HEAP
a   |  3                       r1 | 7                                   num=5
b   |  4                     data | 10                                   add()
                             obj1 | 101
Here num doesnt belong to any of the methods add or main..so its not inside any of the stacks.if we declare inside only we put it into stack.even methodinakath just num print chythal polum it wont be in stack..
Such INSTANCE VARIABLES go into HEAP.

***HEAP:-it is open space means expandable.
in the heap instance variable num is stored.also the method is stored without much defiinitions.heap also has an addresss say 101. this 101 is stored as value corresponding to obj1 in main stack....when obj1.a is called in the program then it looks the address 101 in heap it gets the add function from heap.there is a link btw stack and heap through this address.there can be multiple objects in heap

class Calculator
{   
    int num=5;                                //instance variable
    public int add(int a,int b)               //local variable
    {
        int result = a+b;
        return result;
    }
}

public class demo
{
    public static void main(String ar[])
    {
        int data =10;

        Calculator obj =new Calculator();
        int res= obj.add(3,4);
        System.out.println(res);
    }
}


-----ARRAY IN JAVA
int num[] ={3,4,5}

int num[] = new int[4]              //returns array with all 4 values as 0 {0,0,0,0}
to put values

num[0]=1;
num[1]=2;
.
.
.
eg:
public class demo {
    public static void main(String ar[])
    {
        int arr[]={3,4,5};
        System.out.println(arr[1]);
    }
}

to print all the values in an array

public class demo {
    public static void main(String ar[])
    {
        int arr[]={3,4,5};
        int i;

        for(i=0;i<3;i++)
        {
            System.out.println(arr[i]);

        }
    }
}


----MULTI DIMENSIONAL ARRAY
multiple arrays combined to get one big array

declaration:  int nums[][]=new int[3][4];               // 3 internal arrays (rows) and 4 elements each(coloums)

eg:
public class demo {
    public static void main(String ar[])
    {
        int i;
        int j;
        int nums[][]=new int[3][4];
        for(i=0;i<3;i++)
        {
            for (j=0;j<=3;j++) {
                System.out.print(nums[i][j] +" ");
            }
            System.out.println(" ");
        }
    }
}

OUTPUT:
0 0 0 0  
0 0 0 0                 //by default values for integer array willbe 0
0 0 0 0  

----JAGGED ARRAY
number of elements in an array is not specified.but how many arrays are there is specified.
int nums[][]=new int[3][]
for each row there will be specific size.

----DRAWBACKS OF ARRAY IN JAVA
*int nums[]=new int[4]     
this statement creates an instance variable.It is stored in heap and at that time itself it occupies 4 spaces in memory...so after this declaratiion we cant change its size.
*array cannot store int string all at a time..but collections can

-----ARRAY OBJECT
class Student
{
    String name;
    int marks;
}

public class demo {
    public static void main(String ar[])
    {
        Student s1 = new Student();
        s1.name="Ashly";
        s1.marks=96;
        Student s2 = new Student();
        s2.name="Maria";
        s2.marks=99;

        Student children[]= new Student[2];
        children[0]= s1;
        children[1]=s2;
        for(int i=0;i<children.length;i++)
            System.out.println(children[i].name + ":" + children[i].marks);


        }
    }

OUTPUT:
Ashly:96
Maria:99

We create Student class and create objects s1,s2,s3.Then we created array children ans assigned values s1,s2 and s3 to it.

----STRING IN JAVA
class Student
{
    String name;
    int marks;
}

public class demo {
    public static void main(String ar[])
    {
        String obj= new String("Ashly");
        System.out.println(obj);

        }
    }

**CONCATENATION is possible with strings
class Student
{
    String name;
    int marks;
}

public class demo {
    public static void main(String ar[])
    {
        String obj= new String("Ashly");
        System.out.println(obj);
        System.out.println(obj.concat("James"));
        }
    }

OUTPUT:
Ashly
AshlyJames

----JAVA STRINGS ARE IMMUTABLE
In Java, strings are immutable, meaning that once a String object is created, its value cannot be changed. 
eg:
String name= new String("Ashly");
String name=new String ("Maria");

when we give like this actually the value of object name ,Ashly is not replaced by Maria.Here is how it works.
*In the stack an object name is created and the address is given as 101 which is present in heap.
*In heap, there will be address 101 and the value corresponding it will be Ashly.(STRING CONSTANT POOL)
*When we assign the same object with Maria the same object points to another address 102 and in the heap corresponding to the address 102 "Maria is stored...so once created string cannot be changed.

String name= new String("Ashly");
String anothername=new String ("Ashly");
when we give like this two objects are not created in the stack
*it will check the string const. pool in heap and if Ashly is already there it will give the location to otherkey also.
*both keys name and anothername points to same address 101

----HOW CAN WE CREATE MUTABLE STRING?(STRING BUFFER)
*StringBuffer sb=new StringBuffer();
System.out.println(sb.capacity());    //OUTPUT:16

By using string buffer the capacity is 16 means it provide 16 spaces for a string for future expansion.

StringBuffer sb=new StringBuffer("Ashly");
System.out.println(sb.capacity());    //OUTPUT:21

capacity increased to 21.
*StringBuffer sb=new StringBuffer("Ashly");
sb.append(" James");
System.out.println(sb);                 //output:Ashly James we can append string using string buffer

* String str=sb.toString();
  System.out.println(str);          //we cannot assign a string buffer to a string...so we use tostring to convert it to string and then asssign it to str.

*we can delete a character at particular index
sb.deleteCharAt(2);
System.out.println(sb);

*we can insert striing at particular index
sb.insert(2,"and");
System.out.println(sb);                //output:Asandhly James

*we can extract substring by giving start and stop index
*we can set length of the string
*we can set minimum capacity using ensurecapacity()

----STATIC VARIABLE IN JAVA

class Phone
{
    String brand;
    int price;
    String name;
    public void display()
    {
        System.out.println(brand +":"+ price +":"+ name);
    }
}

public class demo {
    public static void main(String ar[])
    {
        Phone obj1=new Phone();
        Phone obj2=new Phone();
        obj1.brand="Apple";
        obj1.price=1500;
        obj1.name="Smartphone";
        obj2.brand="Samsung";
        obj2.price=1700;
        obj2.name="Smartphone";
        obj1.display();
        obj2.display();


        }
    }

OUTPUT:
Apple:1500:Smartphone
Samsung:1700:Smartphone
//Using static variable means if we make change to the value of that variable related to any one of the objects then auomatically it is applicable for all objects.It can be used for variables having same values.
*Here smart phone is common name so making that instance variable static .
eg:
class Phone
{
    String brand;
    int price;
    static String name;                       //made it static
    public void display()
    {
        System.out.println(brand +":"+ price +":"+ name);
    }
}

public class demo {
    public static void main(String ar[])
    {
        Phone obj1=new Phone();
        Phone obj2=new Phone();
        obj1.brand="Apple";
        obj1.price=1500;
        Phone.name="Smartphone";            //after making it static we have to refer it using class name not object name so use Phone
        obj2.brand="Samsung";
        obj2.price=1700;
        Phone.name="Smartphone";
        obj1.name="smart";                     //we changed obj1 only to smart but both objects value changes.
        obj1.display();
        obj2.display();                      
        }
    }
*OUTPUT:
Apple:1500:smart
Samsung:1700:smart

----STATIC METHOD
in front of the method/function there will be the keyword static.Usingstatic method we call call anywhwere from the class also no need of creating the object.

eg:
for the above example
public void display()
    {
        System.out.println(brand +":"+ price +":"+ name);
    }
public static void show()                      //static method
    {
        System.out.println("in static method");
    }

if we use static method then we can call it directly using class name.
Phone.display();  ----- here display is not static method so it cannot be called using classname phone.returns no value.we need to create object of phone and the call.
Phone.show(); ---------show is a static method so it can be called using the class name.returns "in a static method"
*public class Demo{
 public static void main(string ar[])
if we dont use static in main method then we  have to create an object of demo to call it.ain is the start of execution of program.If execution is not started then we cant create an object of demo.it will be a dead lock

----ENCAPSULATION
Data is kept hidden for limited acccess by users.data is kept inside boxes .These boxes are variables.No one can see the data .if they want, they have to ask and we can decide whether to tell it or not. So use private keyword with instance variable.So we can access that only within that class.
eg:brain has all the info like our name age etc...it is kept private ...when someone asks age brain thinks whether i need to share or not.If yes brain can share it only by methods speaking writing etc...So public methods are defined inside the class.
