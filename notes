Java extension is .java
if we need to print something we need method in java. Here print is a method.Use colon after every statement
System.out.println("Hello World");
bytecode has extension .class

---WORA
Java is a Write Once Run Anywhere.once we write code in our machine it can be run in any machine having the jre and jvm

---JVM
for running java we need jvm java virtual machine irrespective of the os ios windows etc.no jvm means we cant run.We have os on hardware. JVM execute java code we create.JVm undestands only byte code which is not readable by humans.so we neeed a compiler to convert the java code we write to a bytecode.Our code can be many files. out of all these files if we have to run first file then the first file need to have main method.Exexution start from the file we specify which has the main.

---JRE
jvm alone is not enough to run a java program.we need a lot of libraries also...jvm along with libraries gives jre or java runtime environment.

---JDK
stands for java development kit.Jdk will have jre and jre will have jvm.Developersv install jdk.

---MAIN
main comes with public static void main(arguments).
Also we need to have a class.Main should come inside the class.In java we cfeate everything as class and objects.
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        System.out.println("Hello world");
    }
}
---println
when we use println after printing the statement the cursoor move to next line...if we use print cursor stays there itself so next statement also will be printed in the same line


---DATATYPES
boolean    boolean b =true;                 true and false..used for conditions
char    char c = 'k';     use single quotes..accepts only single alphabet or single digit number ..'5'
int                       negative and positive numbers
short
byte                      -128 to 127
long        long num = 5643l    put l after the number
float       float num = 5.6f   -we have to explicitly mention it
double      double num = 5.6    more precision

int num1=4;
datatype first then variable name

public class javatutorial
{
    public static void main(String a[])
    {
        int num1=9;
        int num2=1;
        int result= num1+num2;
        System.out.println(result);
      
    }
}

---LITERALS
literals are fixed values that are used directly in the code to represent data.
Integer Literals: Whole numbers, written in decimal, hexadecimal (e.g., 0x1A), octal (e.g., 012), or binary (e.g., 0b101).
Floating-Point Literals: Real numbers, written as decimals or in scientific notation (e.g., 3.14, 1.23e4).
Character Literals: Single characters enclosed in single quotes (e.g., 'A', '1').
String Literals: Sequences of characters enclosed in double quotes (e.g., "Hello, World!").
Boolean Literals: Represent true or false.
Null Literal: Represents a null reference, indicating the absence of an object.

---IMPLCIT CONVERSION(TYPE CONVERSION)
Suppose we have byte b = 126 and int a = 256...we know that byte can only store upto 127 ...when we assign b=a ..it cant but we can assign a=b;
a=b assignment is called implicit type conversion

---EXPLICIT TYPE CONVERSION(CASTING)
WE NEED TO CHANGE THE DATATYPE TO ACCOMODATE THEM
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        byte num1=126;
        int num2=257;
        num1= (byte)num2;
        System.out.println(num1);

    }
}

while converting int to byte modulus is taken. means the remainder after dividing 257 with 256 is done ...means output will be 1.

another example 

float f=5.6f;
int x= (int)f;                     Output :5
this works.

---TYPE PROMOTION
EG:
byte b=10;
byte c=30;
int result = b*c;
Here after multiplication the result is 300.even it was the result of multiplication of bytes it is out of range...so store them in int.

---ARITHMETIC OPERATORS
addition +
substraction -
multiplication *
division /            give quotient only
modulus %             give reminder
post increment num++
pre increment  ++num
postdecrement num--
pre decrement --num


eg:
int num1 = 7;
int result= num1 +1;
System.out.println(result);                           output:8

eg:
int num1 = 7;
num1++;
System.out.println(num1);                            output:8


eg:
num--;

---RELATIONAL OPERATORS
less than       <
greater than    >
equal to        =       assignment operator
comparison      ==
not equal       !=
                >=
                <=

---LOGICAL OPERATORS
and        &
or         |
not       !
short circuit and    &&
short circuit or     ||

eg:
r= x>y && a<b
If first one is false then it won't look the second thing.similarly for || also.if first one is true it immediately give the output true.
eg:
s= !r
if r is true s is false
eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int b=3;
        boolean result= c>b;
        System.out.println(result);

    }
}
output is false.

---CONDITIONAL STATEMENTS

----IF ELSE

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        //int b=3;
       if(c>7)
        System.out.println("Hello");
       else
           System.out.println("bye");

    }
}

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        //int b=3;
       if(c>7)
       {
        System.out.println("Hello");                   ----if multiple statements then use bracket
        System.out.println("thank");
        }
       else
           System.out.println("bye");

    }
}

---IF ELSE IF
EG:
public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int b=3;
       if(c>7)
        System.out.println("Hello");                    
       else if(condition)
           System.out.println("bye");
       else
           System.out.println("bye");
    }
}

---TERNARY OPERATOR/CONDITIONAL OPERATOR

public class javatutorial
{
    public static void main(String a[])
    {
        int c=2;
        int result;
        result=c>3? 10:20;
            System.out.println(result);                   


    }
}

---SWITCH STATEMENT

public class javatutorial
{
    public static void main(String a[])
    {
        int n=3;
        switch(n)
        {
            case 1:
                System.out.println("monday");
                break;
            case 2:
                System.out.println("tuesday");
                break;
            case 3:
                System.out.println("wednesday");
                break;

        }
    }
}

OUTPUT: WEDNESDAY

eg:
new switch statement allows to use string also as cases.earlier it was only numbers.if not any of the cases then it executes default
public class javatutorial
{
    public static void main(String a[])
    {
        String day="friday";
        switch(day)
        {
            case "monday","tuesday":
                System.out.println("6am");
                break;
            case "wednesday":
                System.out.println("7am");
                break;
            default:
                System.out.println("8am");
                break;

        }
    }
}

----WHILE LOOP
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        while(i<5) {
            System.out.println("result");
            i++;
        }
    }
}

suppose for every result we have to print hi 3 times
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        while(i<5) {
            System.out.println("result");
            int j = 1;
            while (j <= 3) {
                System.out.println("hi");
                j++;
            }
            i++;
        }
    }
}

----DO WHILE LOOP

eg:
public class javatutorial
{
    public static void main(String a[])
    {
        int i=1;
        do{
            System.out.println("result");
            i++;
           }while(i<3);
    }
}

----FOR LOOP

public class javatutorial
{
    public static void main(String a[])
    {
        int i;
        for(i=0;i<=4;i++)
        {
            System.out.println("result");

        }
    }
}

---CLASS AND OBJECT THEORY IN JAVA
in java everythig around is considered as an object.Class is like a blueprint.We create objects using that.Objects differ each other.Object will have a property and behaviour.human sare objects and has property like know how to dance walk etc...also everyone walk differently thats the behaviour. Carpenter creates a table(object) we need to give the blueprint or design specs to him...so as it is technical we give the details to a person and he explains technically to the carpenter .similarly we create a class file in programming that act as a bleprint for the carpenter to create the object.we create a classfile it is converted to byte code after compilation then goes to jvm and then get object.
- inside class we write variables(properties)and write methods(functions).

---METHODS/FUNCTIONS
methods start with how we can access them,public means we can access them anywhere.after a method perform operations we have to specify the result and also along with its datatype.
public int add          for a calculator
